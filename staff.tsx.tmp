import React, { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from "@clerk/nextjs";
// import { FiAward, FiBarChart2, FiChevronRight, FiAlertTriangle, FiLoader } from 'react-icons/fi'; // Using react-icons for a clean look
import { ChevronRight, ArrowRight,Award ,BarChart ,AlertTriangle, Loader } from '@/components/Icons';

import CircularProgressBarWithGradient from '../components/CircularProgressBarWithGradient'; // Adjust path
import HorizontalProgressBar from '../components/HorizontalProgressBar'; // Adjust path
import Card from '../components/Card'; // A new reusable Card component
import styles from '../styles/Dashboard.module.css'; // Using the new CSS module

// --- Interfaces (No changes needed) ---
interface EvaluationScores {
  language: number;
  profession: number;
  logic: number;
  expressiveness: number;
  total: number;
}

interface FullEvaluationData {
  user_id: string;
  description?: string;
  introduction_language?: number;
  introduction_profession?: number;
  introduction_logic?: number;
  introduction_expressiveness?: number;
  introduction_total?: number;
  technology_language?: number;
  technology_profession?: number;
  technology_logic?: number;
  technology_expressiveness?: number;
  technology_total?: number;
  analysis_language?: number;
  analysis_profession?: number;
  analysis_logic?: number;
  analysis_expressiveness?: number;
  analysis_total?: number;
  final_language?: number;
  final_profession?: number;
  final_logic?: number;
  final_expressiveness?: number;
  final_total?: number;
}

interface QueryResponse<T> {
  success: boolean;
  message: string;
  data: T | T[] | null;
}

// --- Score-based Color Gradients ---
const totalScoreGradientColors = {
  high: ['#10B981', '#6EE7B7'], // Green
  mid: ['#F59E0B', '#FCD34D'],   // Amber
  low: ['#EF4444', '#F87171'],    // Red
};

// --- Helper to determine gradient color ---
const getGradientForScore = (score: number): string[] => {
  if (score >= 80) return totalScoreGradientColors.high;
  if (score >= 60) return totalScoreGradientColors.mid;
  return totalScoreGradientColors.low;
};


// --- STAGE CARD SUB-COMPONENT ---
// For displaying each interview stage (Introduction, Technology, etc.)
interface StageCardProps {
  title: string;
  stageKey: 'introduction' | 'technology' | 'analysis';
  scores: EvaluationScores | '未测试';
  onNavigate: (stage: string) => void;
}

const StageCard: React.FC<StageCardProps> = ({ title, stageKey, scores, onNavigate }) => {
  const isTested = typeof scores !== 'string';

  return (
    <Card className={styles.stageCard}>
      <div className={styles.stageCardHeader}>
        <h3 className={styles.stageTitle}>{title}</h3>
        {isTested && (
          <div className={styles.stageTotalScoreBadge}>
            {scores.total}
          </div>
        )}
      </div>
      <div className={styles.stageCardBody}>
        {isTested ? (
          <div className={styles.stageSkills}>
            <p>语言表达: <strong>{scores.language}</strong></p>
            <p>专业能力: <strong>{scores.profession}</strong></p>
            <p>逻辑思维: <strong>{scores.logic}</strong></p>
            <p>表现力: <strong>{scores.expressiveness}</strong></p>
          </div>
        ) : (
          <p className={styles.notTestedText}>尚未进行此阶段测试。</p>
        )}
      </div>
      {/* <button className={styles.demoButton} onClick={() => onNavigate(stageKey)}>
        {isTested ? '查看详情' : '前往测试'} 
        <FiChevronRight />
      </button> */}
      <button className={styles.demoButton} onClick={() => onNavigate(stageKey)}>
        {isTested ? '查看详情' : '前往测试'}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={2}
          stroke="currentColor"
          className="w-4 h-4 ml-1" // Adjust classes for desired size and spacing
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M8.25 4.5l7.5 7.5-7.5 7.5"
          />
        </svg>
      </button>
    </Card>
  );
};


// --- MAIN DASHBOARD COMPONENT ---
const MainDashboard: React.FC = () => {
  const router = useRouter();
  const { userId, isLoaded } = useAuth();
  const [evaluationData, setEvaluationData] = useState<FullEvaluationData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  // --- Data fetching logic (No changes needed) ---
  const fetchEvaluationData = useCallback(async () => {
    if (!isLoaded || !userId) {
        // Wait for Clerk to load the user ID
        return;
    }
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/databases/query?table=evaluations&user_id=${userId}`);
      if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);
      const result: QueryResponse<FullEvaluationData> = await response.json();
      if (result.success && result.data) {
        setEvaluationData(Array.isArray(result.data) ? result.data[0] || null : result.data);
      } else {
        setError(result.message || 'Failed to fetch evaluation data.');
        setEvaluationData(null);
      }
    } catch (err) {
      console.error('Error fetching evaluation data:', err);
      setError(err instanceof Error ? err.message : 'An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  }, [userId, isLoaded]);

  useEffect(() => {
    fetchEvaluationData();
  }, [fetchEvaluationData]);

  // --- Navigation logic (No changes needed) ---
  const navigateToDemo = (stage: string) => {
    router.push({ pathname: '/demo', query: { stage } });
  };

  // --- Score calculation logic (No changes needed) ---
  const getStageScores = (stagePrefix: 'introduction' | 'technology' | 'analysis' | 'final'): EvaluationScores | '未测试' => {
    if (!evaluationData) return '未测试';
    const scores: EvaluationScores = {
      language: (evaluationData as any)[`${stagePrefix}_language`],
      profession: (evaluationData as any)[`${stagePrefix}_profession`],
      logic: (evaluationData as any)[`${stagePrefix}_logic`],
      expressiveness: (evaluationData as any)[`${stagePrefix}_expressiveness`],
      total: (evaluationData as any)[`${stagePrefix}_total`],
    };
    const isTested = Object.values(scores).every(score => score !== undefined && score !== null && score !== -1);
    return isTested ? scores : '未测试';
  };

  // --- Loading State UI ---
  if (loading) {
    return (
      <div className={styles.stateContainer}>
        <Loader className="w-6 h-6" />
        <p>正在加载您的评估报告...</p>
      </div>
    );
  }

  // --- Error State UI ---
  if (error) {
    return (
      <div className={styles.stateContainer}>
        <AlertTriangle className={`${styles.errorIcon} w-5 h-5 text-red-500`} />
        <p>加载评估数据失败</p>
        <small>{error}</small>
        <button onClick={fetchEvaluationData} className={styles.retryButton}>重试</button>
      </div>
    );
  }

  const finalScores = getStageScores('final');
  const introductionScores = getStageScores('introduction');
  const technologyScores = getStageScores('technology');
  const analysisScores = getStageScores('analysis');

  return (
    <div className={styles.dashboardContainer}>
      <header className={styles.header}>
        <h1 className={styles.title}>面试评估总览</h1>
        <p className={styles.subtitle}>这是您在各个面试环节中的综合能力表现。</p>
      </header>

      <main className={styles.mainGrid}>
        {/* --- LEFT COLUMN: FINAL SCORE --- */}
        <section className={styles.leftColumn}>
          <Card>
            <div className={styles.finalScoreHeader}>
              <Award className="w-5 h-5 text-yellow-500" />
              <h2>最终综合评估</h2>
            </div>
            {typeof finalScores !== 'string' ? (
              <>
                <div className={styles.finalScoreCircularProgress}>
                  <CircularProgressBarWithGradient
                    value={finalScores.total}
                    gradientColors={getGradientForScore(finalScores.total)}
                  />
                </div>
                <div className={styles.finalSkillsGrid}>
                   <HorizontalProgressBar label="语言表达" value={finalScores.language} color="#3B82F6" />
                   <HorizontalProgressBar label="专业能力" value={finalScores.profession} color="#8B5CF6" />
                   <HorizontalProgressBar label="逻辑思维" value={finalScores.logic} color="#F97316" />
                   <HorizontalProgressBar label="表现力" value={finalScores.expressiveness} color="#14B8A6" />
                </div>
                <p className={styles.evaluationSummary}>
                  {evaluationData?.description || "综合评价：表现良好，在多个维度展现了扎实的基础和潜力。"}
                </p>
              </>
            ) : (
              <p className={styles.notTestedTextLarge}>最终评估尚未生成</p>
            )}
          </Card>
        </section>

        {/* --- RIGHT COLUMN: STAGE DETAILS --- */}
        <section className={styles.rightColumn}>
           <div className={styles.stageGridHeader}>
             <BarChart className="w-5 h-5 text-blue-500" />
             <h2>各阶段表现</h2>
           </div>
           <div className={styles.stageGrid}>
             <StageCard title="自我介绍" stageKey="introduction" scores={introductionScores} onNavigate={navigateToDemo} />
             <StageCard title="技术问答" stageKey="technology" scores={technologyScores} onNavigate={navigateToDemo} />
             <StageCard title="情景分析" stageKey="analysis" scores={analysisScores} onNavigate={navigateToDemo} />
           </div>
        </section>
      </main>
    </div>
  );
};

export default MainDashboard;